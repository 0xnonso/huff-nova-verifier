/// SPDX-License-Identifier: MIT
#include "../Constants.huff"

/// @notice Computes the pairing check of two sets of points.
/// @param mem_ptr_1 Memory pointer to array of G1 points.
/// @param mem_ptr_2 Memory pointer to array of of G2 points.
/// @return True if the pairing check passes, false otherwise.
/// @dev For example pairing([P1(), P1().negate()], [P2(), P2()]) should
///     return true.
#define macro PAIRING(mem_ptr, ZERO) = takes (2) returns (1) {
                                        // [mem_ptr_1, mem_ptr_2]
    dup1                                // [mem_ptr_1, mem_ptr_1, mem_ptr_2]
    mload                               // [p1_len = mload(mem_ptr_1), mem_ptr_1, mem_ptr_2]
    dup3                                // [mem_ptr_2, p1_len, mem_ptr_1, mem_ptr_2]
    mload                               // [p2_len = mload(mem_ptr_2), p1_len, mem_ptr_1, mem_ptr_2]
    dup2                                // [p1_len, p2_len, p1_len, mem_ptr_1, mem_ptr_2]
    eq                                  // [p1_len == p2_len, p1_len, mem_ptr_1, mem_ptr_2]
    continue0                           // [jump_dest, p1_len == p2_len, p1_len, mem_ptr_1, mem_ptr_2]
    jumpi                               // [p1_len, mem_ptr_1, mem_ptr_2]

    <ZERO>
    <ZERO>
    revert

    continue0:
                                        // [p1_len, mem_ptr_1, mem_ptr_2]
        dup1                            // [p1_len, p1_len, mem_ptr_1, mem_ptr_2]
        iszero                          // [iszero(p1_len), p1_len, mem_ptr_1, mem_ptr_2]
        empty_input                     // [jump_dest, iszero(p1_len), p1_len, mem_ptr_1, mem_ptr_2]
        jumpi                           // [p1_len, mem_ptr_1, mem_ptr_2]
        dup1                            // [p1_len, p1_len, mem_ptr_1, mem_ptr_2]
        [SIX]                           // [6, p1_len, p1_len, mem_ptr_1, mem_ptr_2]
        mul                             // [input_size = 6 * p1_len, p1_len, mem_ptr_1, mem_ptr_2]
        swap2                           // [mem_ptr_1, p1_len, input_size, mem_ptr_2]
        0x20                            // [32, mem_ptr_1, p1_len, input_size, mem_ptr_2]
        add                             // [ext_mem_ptr_1 = 32 + mem_ptr_1, p1_len, input_size, mem_ptr_2]
        swap2                           // [input_size, p1_len, ext_mem_ptr_1, mem_ptr_2]
        swap3                           // [mem_ptr_2, p1_len, ext_mem_ptr_1, input_size]
        0x20                            // [32, mem_ptr_2, p1_len, ext_mem_ptr_1, input_size]
        add                             // [ext_mem_ptr_2 = 32 + mem_ptr_2, p1_len, ext_mem_ptr_1, input_size]
        swap3                           // [input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        <ZERO>                          // [i = 0, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]

    loop0:
        dup4                            // [ext_mem_ptr_1, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        dup2                            // [i, ext_mem_ptr_1, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        dup1                            // [i, i, ext_mem_ptr_1, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [i = i + i, ext_mem_ptr_1, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        0x20                            // [32, i, ext_mem_ptr_1, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [32 * i, ext_mem_ptr_1, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [(32 * i) + ext_mem_ptr_1, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mload                           // [mload((32 * i) + ext_mem_ptr_1), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        dup2                            // [i, mload((32 * i) + ext_mem_ptr_1), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        [SIX]                           // [6, i, mload((32 * i) + ext_mem_ptr_1), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [6 * i, mload((32 * i) + ext_mem_ptr_1), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        0x20                            // [32, 6 * i, mload((32 * i) + ext_mem_ptr_1), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [32 * 6 * i, mload((32 * i) + ext_mem_ptr_1), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        <mem_ptr>                       // [mem_ptr, 32 * 6 * i, mload((32 * i) + ext_mem_ptr_1), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [mem_ptr + 32 * 6 * i, mload((32 * i) + ext_mem_ptr_1), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mstore                          // [i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
       
        dup4                            // [ext_mem_ptr_1, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        dup2                            // [i, ext_mem_ptr_1, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        dup1                            // [i, i, ext_mem_ptr_1, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [i = i + i, ext_mem_ptr_1, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        0x20                            // [32, i, ext_mem_ptr_1, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [32 * i, ext_mem_ptr_1, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [(32 * i) + ext_mem_ptr_1, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        0x20                            // [32, (32 * i) + ext_mem_ptr_1, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [32 + (32 * i) + ext_mem_ptr_1, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mload                           // [mload(32 + (32 * i) + ext_mem_ptr_1), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        dup2                            // [i, mload(32 + (32 * i) + ext_mem_ptr_1), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        [SIX]                           // [6, i, mload(32 + (32 * i) + ext_mem_ptr_1), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [6 * i, mload((32 * i) + ext_mem_ptr_1), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        [ONE]                           // [1, 6 * i, mload((32 * i) + ext_mem_ptr_1), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [1 + (6 * i), mload((32 * i) + ext_mem_ptr_1), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        0x20                            // [32, 1 + (6 * i), mload((32 * i) + ext_mem_ptr_1), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [32 * (1 + (6 * i)), mload((32 * i) + ext_mem_ptr_1), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        <mem_ptr>                       // [mem_ptr, 32 * (1 + (6 * i)), mload((32 * i) + ext_mem_ptr_1), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [mem_ptr + (32 * (1 + (6 * i))), mload((32 * i) + ext_mem_ptr_1), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mstore                          // [i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]

        dup5                            // [ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        dup2                            // [i, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        [FOUR]                          // [4, i, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [i = i * 4, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        0x20                            // [32, i, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [32 * i, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [(32 * i) + ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        0x20                            // [32, (32 * i) + ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [32 + (32 * i) + ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mload                           // [mload(32 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        dup2                            // [i, mload(32 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        [SIX]                           // [6, i, mload(32 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [6 * i, mload(32 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        [TWO]                           // [2, 6 * i, mload(32 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [2 + (6 * i), mload(32 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        0x20                            // [32, 2 + (6 * i), mload(32 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [32 * (2 + (6 * i)), mload(32 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        <mem_ptr>                       // [mem_ptr, 32 * (2 + (6 * i)), mload(32 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [mem_ptr + (32 * (2 + (6 * i))), mload(32 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mstore                          // [i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]

        dup5                            // [ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        dup2                            // [i, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        [FOUR]                          // [4, i, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [i = i * 4, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        0x20                            // [32, i, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [32 * i, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [(32 * i) + ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mload                           // [mload((32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        dup2                            // [i, mload(32 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        [SIX]                           // [6, i, mload(32 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [6 * i, mload((32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        [THREE]                         // [3, 6 * i, mload((32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [3 + (6 * i), mload((32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        0x20                            // [32, 3 + (6 * i), mload((32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [32 * (3 + (6 * i)), mload((32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        <mem_ptr>                       // [mem_ptr, 32 * (3 + (6 * i)), mload((32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [mem_ptr + (32 * (3 + (6 * i))), mload((32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mstore                          // [i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]

        dup5                            // [ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        dup2                            // [i, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        [FOUR]                          // [4, i, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [i = i * 4, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        0x20                            // [32, i, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [32 * i, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [(32 * i) + ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        0x60                            // [96, (32 * i) + ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [96 + (32 * i) + ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mload                           // [mload(96 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        dup2                            // [i, mload(96 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        [SIX]                           // [6, i, mload(96 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [6 * i, mload(96 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        [FOUR]                          // [4, 6 * i, mload(96 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [4 + (6 * i), mload(96 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        0x20                            // [32, 4 + (6 * i), mload(96 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [32 * (4 + (6 * i)), mload(96 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        <mem_ptr>                       // [mem_ptr, 32 * (4 + (6 * i)), mload(96 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [mem_ptr + (32 * (4 + (6 * i))), mload(96 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mstore                          // [i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]

        dup5                            // [ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        dup2                            // [i, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        [FOUR]                          // [4, i, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [i = i * 4, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        0x20                            // [32, i, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [32 * i, ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [(32 * i) + ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        0x40                            // [64, (32 * i) + ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [64 + (32 * i) + ext_mem_ptr_2, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mload                           // [mload(64 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        dup2                            // [i, mload(64 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        [SIX]                           // [6, i, mload(64 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [6 * i, mload(64 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        [FIVE]                          // [5, 6 * i, mload(64 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [5 + (6 * i), mload(64 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        0x20                            // [32, 5 + (6 * i), mload(64 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mul                             // [32 * (5 + (6 * i)), mload(64 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        <mem_ptr>                       // [mem_ptr, 32 * (5 + (6 * i)), mload(64 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [mem_ptr + (32 * (5 + (6 * i))), mload(64 + (32 * i) + ext_mem_ptr_2), i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        mstore                          // [i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]

        [ONE]                           // [1, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        add                             // [i = 1 + i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        dup3                            // [p1_len, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        dup2                            // [i, p1_len, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        lt                              // [i < p1_len, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        loop0                           // [jump_dest, i < p1_len, i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        jumpi                           // [i, input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
        

    pop                                 // [input_size, p1_len, ext_mem_ptr_1, ext_mem_ptr_2]
    swap3                               // [ext_mem_ptr_2, p1_len, ext_mem_ptr_1, input_size]
    pop pop pop                         // [input_size]

    <mem_ptr>                           // [mem_ptr, input_size]
    0x20                                // [32, mem_ptr, input_size]
    swap2                               // [input_size, mem_ptr, 32]
    0x20                                // [32, input_size, mem_ptr, 32]
    mul                                 // [input_size = 32 * input_size, mem_ptr, 32]
    <mem_ptr>                           // [mem_ptr, input_size, mem_ptr, 32]
    <ZERO>                              // [0, mem_ptr, input_size, mem_ptr, 32]
    0x08                                // [0x08, 0, mem_ptr, input_size, mem_ptr, 32]
    0x7D0                               // [2000, 0x08, 0, mem_ptr, input_size, mem_ptr, 32]
    gas                                 // [gas, 2000, 0x08, 0, 0, input_size, mem_ptr, 32]
    sub                                 // [gas - 2000, 0x08, 0, mem_ptr, input_size, mem_ptr, 32]
    call                                // [success]
    is_success                          // [jump_dest, success]
    jumpi                               // []

    <ZERO>
    <ZERO>
    revert

    is_success:
                                        // []
        <mem_ptr>                       // [mem_ptr]
        mload                           // [mload(mem_ptr)]
        iszero                          // [iszero(mload(mem_ptr))]
        iszero                          // [out = iszero(iszero(mload(mem_ptr)))]
        finish0                         // [jump_dest, out]
        jump                            // [out]

    empty_input:
        pop pop pop                     // []
        <ZERO>                          // [0]

    finish0:
                                        // [out]
}

// mem_ptr_1 - store args
// mem_ptr_2 - where to copy args from
/// @notice Computes the product of pairings for two pairs of points.
/// @param mem_ptr_1 Memory pointer where pairs are located as follows:
///                 `G1Point memory a1, G2Point memory a2, G1Point memory b1, G2Point memory b2`
///                 - The first G1 point in the first pair.
///                 - The first G2 point in the first pair.
///                 - The second G1 point in the second pair.
///                 - The second G2 point in the second pair.
/// @param mem_ptr_2 Memory pointer to copy `pairing` call data to.
/// @return True if the product of pairings check passes, false otherwise.
#define macro PAIRING_PROD_2(mem_ptr, ZERO) = takes (2) returns (1) {
                                        // [mem_ptr_1, mem_ptr_2]
    0x02                                // [2, mem_ptr_1, mem_ptr_2]
    dup2                                // [mem_ptr_1, 2, mem_ptr_1, mem_ptr_2]
    mstore                              // [mem_ptr_1, mem_ptr_2]
    0x40                                // [64, mem_ptr_1, mem_ptr_2]
    dup3                                // [mem_ptr_2, 64, mem_ptr_1, mem_ptr_2]
    dup3                                // [mem_ptr_1, mem_ptr_2, 64, mem_ptr_1, mem_ptr_2]
    0x20                                // [32, mem_ptr_1, mem_ptr_2, 64, mem_ptr_1, mem_ptr_2]
    add                                 // [32 + mem_ptr_1, mem_ptr_2, 64, mem_ptr_1, mem_ptr_2]
    __VERBATIM(0x5e)                    // [mcopy(32 + mem_ptr_1, mem_ptr_2, 64), mem_ptr_1, mem_ptr_2]
    0x40                                // [64, mem_ptr_1, mem_ptr_2]
    dup3                                // [mem_ptr_2, 64, mem_ptr_1, mem_ptr_2]
    0xc0                                // [192, mem_ptr_2, 64, mem_ptr_1, mem_ptr_2]
    add                                 // [192 + mem_ptr_2, 64, mem_ptr_1, mem_ptr_2]
    dup3                                // [mem_ptr_1, 192 + mem_ptr_2, 64, mem_ptr_1, mem_ptr_2]
    0x60                                // [96, mem_ptr_1, 192 + mem_ptr_2, 64, mem_ptr_1, mem_ptr_2]
    add                                 // [96 + mem_ptr_1, 192 + mem_ptr_2, 64, mem_ptr_1, mem_ptr_2]
    __VERBATIM(0x5e)                    // [mcopy(96 + mem_ptr_1, 192 + mem_ptr_2, 64), mem_ptr_1, mem_ptr_2]
    0x02                                // [2, mem_ptr_1, mem_ptr_2]
    dup2                                // [mem_ptr_1, 2, mem_ptr_1, mem_ptr_2]
    0xa0                                // [160, mem_ptr_1, 2, mem_ptr_1, mem_ptr_2]
    add                                 // [160 + mem_ptr_1, 2, mem_ptr_1, mem_ptr_2]
    mstore                              // [mem_ptr_1, mem_ptr_2]
    0x80                                // [128, mem_ptr_1, mem_ptr_2]
    dup3                                // [mem_ptr_2, 128, mem_ptr_1, mem_ptr_2]
    0x40                                // [64, mem_ptr_2, 128, mem_ptr_1, mem_ptr_2]
    add                                 // [64 + mem_ptr_2, 128, mem_ptr_1, mem_ptr_2]
    dup3                                // [mem_ptr_1, 64 + mem_ptr_2, 128, mem_ptr_1, mem_ptr_2]
    0xc0                                // [192, mem_ptr_1, 64 + mem_ptr_2, 128, mem_ptr_1, mem_ptr_2]
    add                                 // [192 + mem_ptr_1, 64 + mem_ptr_2, 128, mem_ptr_1, mem_ptr_2]
    __VERBATIM(0x5e)                    // [mcopy(192 + mem_ptr_1, 64 + mem_ptr_2, 128), mem_ptr_1, mem_ptr_2]
    0x80                                // [128, mem_ptr_1, mem_ptr_2]
    dup3                                // [mem_ptr_2, 128, mem_ptr_1, mem_ptr_2]
    0x100                               // [256, mem_ptr_2, 128, mem_ptr_1, mem_ptr_2]
    add                                 // [256 + mem_ptr_2, 128, mem_ptr_1, mem_ptr_2]
    dup3                                // [mem_ptr_1, 256 + mem_ptr_2, 128, mem_ptr_1, mem_ptr_2]
    0x140                               // [320, mem_ptr_1, 256 + mem_ptr_2, 128, mem_ptr_1, mem_ptr_2]
    add                                 // [320 + mem_ptr_1, 256 + mem_ptr_2, 128, mem_ptr_1, mem_ptr_2]
    __VERBATIM(0x5e)                    // [mcopy(320 + mem_ptr_1, 256 + mem_ptr_2, 128), mem_ptr_1, mem_ptr_2]
    swap1                               // [mem_ptr_2, mem_ptr_1]
    pop                                 // [mem_ptr_1]
    dup1                                // [mem_ptr_1, mem_ptr_1]
    0xa0                                // [160, mem_ptr_1, mem_ptr_1]
    add                                 // [mem_ptr_2 = 160 + mem_ptr_1, mem_ptr_1]
    swap1                               // [mem_ptr_1, mem_ptr_2]
    PAIRING(<mem_ptr>, <ZERO>)          // [result]
}